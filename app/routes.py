from flask import Blueprint, render_template, request, redirect, url_for, flash, request, flash
from app.models import Customer, Order, LoyaltyPointsHistory, User
from sqlalchemy import and_, func
from datetime import datetime,date
from flask_login import login_user, logout_user, login_required, LoginManager 
from werkzeug.security import check_password_hash
from app.db import db
from flask import Blueprint

bp = Blueprint('main', __name__)

@bp.route('/')
def index():
    return '–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞'


bp = Blueprint('main', __name__)



@bp.route('/clients')
@login_required
def clients():
    customers = Customer.query.all()
    return render_template('clients.html', customers=customers)
@bp.route('/orders')
@login_required
def orders():
    query = Order.query

    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–æ–≤–∞—Ä—É
    product_name = request.args.get('product_name')
    if product_name:
        query = query.filter(Order.product_name.ilike(f"%{product_name}%"))

    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    status = request.args.get('status')
    if status:
        query = query.filter_by(status=status)

    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –¥–∞—Ç–∞–º–∏
    date_from = request.args.get('date_from')
    if date_from:
        query = query.filter(Order.order_date >= date_from)

    date_to = request.args.get('date_to')
    if date_to:
        query = query.filter(Order.order_date <= date_to)

    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç–∏
    payment_status = request.args.get('payment_status')
    if payment_status:
        query = query.filter_by(payment_status=payment_status)

    orders = query.all()
    customers = Customer.query.all()  # –î–æ–¥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤
    return render_template('orders.html', orders=orders, customers=customers)


@bp.route('/')
def home():
    return redirect(url_for('main.login'))


@bp.route('/add_customer', methods=['GET', 'POST'])
@login_required
def add_customer():
    if request.method == 'POST':
        LOYALTY_THRESHOLDS = {
            '–ù–æ–≤–∞—á–æ–∫': 0,
            '–õ–æ—è–ª—å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç': 1500,
            'VIP': 5000
        }

        name = request.form['name']
        email = request.form['email']
        phone = request.form['phone']
        address = request.form['address']
        loyalty_status = request.form['loyalty_status']

        loyalty_status_points = LOYALTY_THRESHOLDS.get(loyalty_status, 0)

        customer = Customer(
            name=name,
            email=email,
            phone=phone,
            address=address,
            loyalty_status=loyalty_status,
            loyalty_status_points=loyalty_status_points,
            loyalty_points=0  # –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∫–µ—à–±–µ–∫-–±–∞–ª–∏
        )

        db.session.add(customer)
        db.session.commit()  # –°–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–±–∞ –∑–±–µ—Ä–µ–≥—Ç–∏, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ customer.id

        # üëâ –û—Å—å —Ç—É—Ç –¥–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        loyalty_history = LoyaltyPointsHistory(
            customer_id=customer.id,
            points=0,
            points_type='–ù–∞–¥–∞–Ω–æ —Å—Ç–∞—Ç—É—Å',
            description=f'–ö–ª—ñ—î–Ω—Ç—É –Ω–∞–¥–∞–Ω–æ —Å—Ç–∞—Ç—É—Å "{loyalty_status}" –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ',
            loyalty_points_before=0,
            loyalty_status_before='–ù–æ–≤–∞—á–æ–∫',
            loyalty_status_points_before=0,
            loyalty_points_after=loyalty_status_points,
            loyalty_status_after=loyalty_status,
            loyalty_status_points_after=loyalty_status_points,
            date=datetime.utcnow()
        )
        db.session.add(loyalty_history)
        db.session.commit()

        flash('–ö–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ', 'success')
        return redirect(url_for('main.clients'))

    return render_template('add_customer.html')


# –°—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
@bp.route('/delete_customer/<int:id>', methods=['GET'])
@login_required
def delete_customer(id):
    customer = Customer.query.get_or_404(id)
    db.session.delete(customer)
    db.session.commit()
    return redirect(url_for('main.clients'))

# –°—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
@bp.route('/edit_customer/<int:id>', methods=['GET', 'POST'])
@login_required
def edit_customer(id):
    customer = Customer.query.get_or_404(id)
    
    if request.method == 'POST':
        customer.name = request.form['name']
        customer.email = request.form['email']
        customer.phone = request.form['phone']
        customer.address = request.form['address']
        customer.loyalty_status = request.form['loyalty_status']
        
        db.session.commit()
        
        return redirect(url_for('main.clients'))
    
    return render_template('edit_customer.html', customer=customer)
    
@bp.route('/add_order', methods=['GET', 'POST'])
@login_required
def add_order():
    customers = Customer.query.all()
    orders = Order.query.all()  # –≤–∏–∑–Ω–∞—á–∞—î–º–æ –æ–¥—Ä–∞–∑—É
    if request.method == 'POST':
        product_name = request.form['product_name']
        quantity = int(request.form['quantity'])
        price = float(request.form['price'])
        customer_id = int(request.form['customer_id'])
        order_date = datetime.strptime(request.form['order_date'], '%Y-%m-%d')
        delivery_type = request.form['delivery_type']
        delivery_address = request.form.get('delivery_address', '') if delivery_type == 'delivery' else ''
        status = request.form['status']
        comment = request.form.get('comment', '')
        payment_status = request.form['payment_status']
        cashback_points = int(request.form['cashbackPoints'])  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–µ—à–±–µ–∫—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è

        customer = Customer.query.get(customer_id)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–µ—à–±–µ–∫—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è
        if customer.loyalty_points < cashback_points:
            flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤ –∫–µ—à–±–µ–∫—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è.', 'danger')
            return redirect(url_for('bp.add_order'))



        # –í—ñ–¥–Ω—ñ–º–∞—î–º–æ –∫–µ—à–±–µ–∫ –≤—ñ–¥ —Ü—ñ–Ω–∏
        discounted_price = price - cashback_points

        # –Ø–∫—â–æ –∫–µ—à–±–µ–∫ –∑–º–µ–Ω—à—É—î —Ü—ñ–Ω—É –¥–æ –Ω—É–ª—è –∞–±–æ –º–µ–Ω—à–µ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É –Ω–∞ 0
        if discounted_price < 0:
            discounted_price = 0
        order_date_str = request.form['order_date']

        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–µ—à–±–µ–∫ –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è, —è–∫—â–æ –∫–µ—à–±–µ–∫ –±—É–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π
        cashback_comment = f" –û–ø–ª–∞—á–µ–Ω–æ –∫–µ—à–±–µ–∫–æ–º: {cashback_points} –±–∞–ª—ñ–≤" if cashback_points > 0 else ""
                  # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –¥–∞—Ç–∏ —É –æ–±'—î–∫—Ç date
        try:
            order_date = datetime.strptime(order_date_str, '%Y-%m-%d').date()
        except ValueError:
            flash("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏.", "danger")
            return render_template("orders.html", orders=orders, customers=customers)


        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞—Ç–∏
        if order_date > date.today():
                flash("–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É.", "danger")
                return render_template("orders.html", orders=orders, customers=customers)


        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        if quantity <= 0:
            flash("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è.", "danger")
            return render_template("orders.html", orders=orders, customers=customers)


        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        new_order = Order(
            product_name=product_name,
            quantity=quantity,
            price=discounted_price,  # –ó–º—ñ–Ω–µ–Ω–∞ —Ü—ñ–Ω–∞ –ø—ñ—Å–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è –∫–µ—à–±–µ–∫—É
            customer_id=customer_id,
            order_date=order_date,
            delivery_type=delivery_type,
            delivery_address=delivery_address,
            status=status,
            comment=f"{comment}{cashback_comment}",  # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–µ—à–±–µ–∫ –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
            payment_status=payment_status,
            cashback_used=cashback_points  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ–≥–æ –∫–µ—à–±–µ–∫—É
        )
        
        db.session.add(new_order)

        # –°–ø–∏—Å—É—î–º–æ –∫–µ—à–±–µ–∫ –∑ –∫–ª—ñ—î–Ω—Ç–∞, —è–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –±—ñ–ª—å—à–∞ –∑–∞ 0
        if cashback_points > 0:
            customer.loyalty_points -= cashback_points

            # –ó–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à–±–µ–∫—É
            loyalty_points_history = LoyaltyPointsHistory(
                customer_id=customer.id,
                points=-cashback_points,  # –í–∫–∞–∑—É—î–º–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è
                points_type='–ó–Ω—è—Ç—Ç—è –±–∞–ª—ñ–≤',
                description=f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à–±–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {new_order.product_name}",
                loyalty_points_before=customer.loyalty_points + cashback_points,  # –î–æ —Å–ø–∏—Å–∞–Ω–Ω—è
                loyalty_status_before=customer.loyalty_status,
                loyalty_status_points_before=customer.loyalty_status_points,
                loyalty_points_after=customer.loyalty_points,  # –ü—ñ—Å–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è
                loyalty_status_after=customer.loyalty_status,
                loyalty_status_points_after=customer.loyalty_status_points,
                date=datetime.utcnow()
            )

            db.session.add(loyalty_points_history)  # –î–æ–¥–∞—î–º–æ –¥–æ —Å–µ—Å—ñ—ó

        db.session.commit()  # –ö–æ–º—ñ—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è

        # –Ø–∫—â–æ –æ–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞, –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ
        if customer and payment_status == '–æ–ø–ª–∞—á–µ–Ω–æ':
            success = apply_loyalty_logic(new_order, customer)
            if not success:
                return redirect(url_for('bp.add_order'))
    
        db.session.commit()
        flash('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!', 'success')
        return redirect(url_for('main.orders'))
    orders = Order.query.all()  # –î–æ–¥–∞—î–º–æ –æ—Å—å —Ü–µ
    return render_template("orders.html", orders=orders, customers=customers)



@bp.route('/delete_order/<int:id>', methods=['POST'])
@login_required
def delete_order(id):
    order = Order.query.get_or_404(id)
    db.session.delete(order)
    db.session.commit()
    flash('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.', 'success')
    return redirect(url_for('main.orders'))


@bp.route('/edit_order/<int:id>', methods=['GET', 'POST'])
@login_required
def edit_order(id):
    order = Order.query.get_or_404(id)
    old_payment_status = order.payment_status
    old_order_status = order.status

    if request.method == 'POST':
        payment_status = request.form['payment_status']
        status_uk = request.form['status']
        customer = Customer.query.get(order.customer_id)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏
        if (
            (old_payment_status != '–æ–ø–ª–∞—á–µ–Ω–æ' and payment_status == '–æ–ø–ª–∞—á–µ–Ω–æ' and status_uk != '–°–∫–∞—Å–æ–≤–∞–Ω–æ') or
            (old_order_status == '–°–∫–∞—Å–æ–≤–∞–Ω–æ' and status_uk != '–°–∫–∞—Å–æ–≤–∞–Ω–æ' and payment_status == '–æ–ø–ª–∞—á–µ–Ω–æ')
        ):
            success = apply_loyalty_logic(order, customer)
            if not success:
                flash('–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏. –ú–æ–∂–ª–∏–≤–æ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.', 'danger')
                return redirect(url_for('bp.edit_order', id=id))

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω—è—Ç–∏ –±–∞–ª–∏
        if (
            (old_payment_status == '–æ–ø–ª–∞—á–µ–Ω–æ' and payment_status != '–æ–ø–ª–∞—á–µ–Ω–æ') or
            (old_order_status != '–°–∫–∞—Å–æ–≤–∞–Ω–æ' and status_uk == '–°–∫–∞—Å–æ–≤–∞–Ω–æ')
        ):
            success = apply_loyalty_logic(order, customer, deduct_points=True)
            if not success:
                flash('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω—è—Ç–∏ –±–∞–ª–∏. –ú–æ–∂–ª–∏–≤–æ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.', 'danger')
                return redirect(url_for('bp.edit_order', id=id))

          
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order.payment_status = payment_status
        order.status = status_uk
        db.session.commit()

        flash('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–µ!', 'success')
        return redirect(url_for('main.orders'))

    # –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    customers = Customer.query.all()
    status_choices = ['–û—á—ñ–∫—É—î—Ç—å—Å—è', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', '–°–∫–∞—Å–æ–≤–∞–Ω–æ']

    return render_template('order.html', order=order, customers=customers, status_choices=status_choices)

@bp.route('/')
def index():
    return render_template('clients.html')




def apply_loyalty_logic(order, customer, loyalty_points=0, deduct_points=False):
    total_price = order.quantity * order.price

        
    if customer.loyalty_status == 'VIP':
        loyalty_status_coeff = 0.06
        loyalty_points_coeff = 0.045
    elif customer.loyalty_status == '–õ–æ—è–ª—å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç':
        loyalty_status_coeff = 0.03
        loyalty_points_coeff = 0.025
    else:
        loyalty_status_coeff = 0.02
        loyalty_points_coeff = 0.015

    loyalty_status_points = total_price * loyalty_status_coeff
    loyalty_points = total_price * loyalty_points_coeff

    loyalty_points_before = customer.loyalty_points or 0
    loyalty_status_points_before = customer.loyalty_status_points or 0
    loyalty_status_before = customer.loyalty_status
    
    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∑–Ω—è—Ç—Ç—è –±–∞–ª—ñ–≤ –∫–µ—à–±–µ–∫—É
    if deduct_points:
        if order.status == '–°–∫–∞—Å–æ–≤–∞–Ω–æ' or order.payment_status != '–û–ø–ª–∞—á–µ–Ω–æ':
            if customer.loyalty_points >= loyalty_points and customer.loyalty_status_points >= loyalty_status_points:
                customer.loyalty_points -= loyalty_points
                customer.loyalty_status_points -= loyalty_status_points
            else:
                return False  # –Ø–∫—â–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ False

            # –ó–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ –∑–Ω—è—Ç—Ç—è –±–∞–ª—ñ–≤
            description = f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order.product_name} —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–±–æ –∑–º—ñ–Ω–∞ –æ–ø–ª–∞—Ç–∏"
            loyalty_points_history = LoyaltyPointsHistory(
                customer_id=customer.id,
                points=-loyalty_points,  # –í–∫–∞–∑—É—î–º–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è
                points_type='–ó–Ω—è—Ç—Ç—è –±–∞–ª—ñ–≤',
                description=description,
                loyalty_points_before=loyalty_points_before,
                loyalty_status_before=loyalty_status_before,
                loyalty_status_points_before=loyalty_status_points_before,
                loyalty_points_after=customer.loyalty_points,
                loyalty_status_after=customer.loyalty_status,
                loyalty_status_points_after=customer.loyalty_status_points,
                date=datetime.utcnow()
            )
            db.session.add(loyalty_points_history)  # –î–æ–¥–∞—î–º–æ –¥–æ —Å–µ—Å—ñ—ó
            db.session.commit()  # –ö–æ–º—ñ—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            return True  # –£—Å–ø—ñ—à–Ω–æ –∑–Ω—è—Ç–æ –±–∞–ª–∏

    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–µ—à–±–µ–∫—É
    if not deduct_points:
        customer.loyalty_points += loyalty_points
        customer.loyalty_status_points += loyalty_status_points

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ
    points = float(customer.loyalty_status_points or 0)
    if points >= 5000:
        customer.loyalty_status = 'VIP'
        customer.loyalty_status_points_needed = 0  # –î–ª—è VIP —Å—Ç–∞—Ç—É—Å—É –Ω–µ–º–∞—î –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
    elif points >= 1500:
        customer.loyalty_status = '–õ–æ—è–ª—å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç'
        customer.loyalty_status_points_needed = round(5000 - points)
    else:
        customer.loyalty_status = '–ù–æ–≤–∞—á–æ–∫'
        customer.loyalty_status_points_needed = round(1500 - points)

    # –ó–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤
    description = (
        f"{'–ó–Ω—è—Ç—Ç—è' if deduct_points else '–ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ'} {loyalty_points:.2f} –≥—Ä–Ω –∑–∞ –∫–µ—à–±–µ–∫ "
        f"–Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order.product_name}"
    )

    loyalty_points_history = LoyaltyPointsHistory(
        customer_id=customer.id,
        points=-loyalty_points if deduct_points else loyalty_points,
        points_type='–ó–Ω—è—Ç—Ç—è –±–∞–ª—ñ–≤' if deduct_points else '–ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤',
        description=description,
        loyalty_points_before=loyalty_points_before,
        loyalty_status_before=loyalty_status_before,
        loyalty_status_points_before=loyalty_status_points_before,
        loyalty_points_after=customer.loyalty_points,
        loyalty_status_after=customer.loyalty_status,
        loyalty_status_points_after=customer.loyalty_status_points,
        date=datetime.utcnow()
    )

    db.session.add(loyalty_points_history)  # –î–æ–¥–∞—î–º–æ –¥–æ —Å–µ—Å—ñ—ó
    db.session.commit()  # –ö–æ–º—ñ—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö

    return True

@bp.route('/loyalty_dashboard')
@login_required
def loyalty_dashboard():
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –±–∞–ª—ñ–≤
    history = LoyaltyPointsHistory.query.order_by(LoyaltyPointsHistory.date.asc(), LoyaltyPointsHistory.id.asc()).limit(100).all()
    history = history[::-1]

    customers = Customer.query.all()
    top_customers_raw = db.session.query(Customer).order_by(Customer.loyalty_points.desc()).limit(5).all()

    # –§–æ—Ä–º—É—î–º–æ —Ç–æ–ø –∫–ª—ñ—î–Ω—Ç—ñ–≤
    top_customers = []
    for customer in top_customers_raw:
        order_count = db.session.query(Order).filter(Order.customer_id == customer.id).count()
        top_customers.append({
            'name': customer.name,
            'loyalty_status_points': customer.loyalty_status_points,
            'loyalty_status': customer.loyalty_status,
            'loyalty_points': customer.loyalty_points,
            'order_count': order_count,
            'points_history': [h.points for h in customer.loyalty_points_history]
        })

    # –î–∞–Ω—ñ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    points_chart = {
        "labels": [entry.date.strftime("%d.%m") for entry in history[-10:]],
        "data": [entry.loyalty_status_points_after for entry in history[-10:]],
    }

    status_chart = {
    "labels": ["VIP", "–õ–æ—è–ª—å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç", "–ù–æ–≤–∞—á–æ–∫"],
    "data": [
        sum(1 for c in customers if c.loyalty_status == "VIP"),
        sum(1 for c in customers if c.loyalty_status == "–õ–æ—è–ª—å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç"),
        sum(1 for c in customers if (c.loyalty_status or '–ù–æ–≤–∞—á–æ–∫') == "–ù–æ–≤–∞—á–æ–∫"),
    ]
}


    # –§–æ—Ä–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –±–∞–ª—ñ–≤ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö –¥–ª—è –≤–∏–±–æ—Ä—É –≤ –≥—Ä–∞—Ñ—ñ–∫—É
    points_history_by_customer = {}
    for entry in history:
        customer_id = entry.customer_id
        if customer_id not in points_history_by_customer:
            points_history_by_customer[customer_id] = []
        points_history_by_customer[customer_id].append({
            'date': entry.date.strftime("%d.%m"),
            'points': entry.loyalty_status_points_after
        })

    return render_template(
        'loyalty_dashboard.html',
        history=history,
        customers=customers,
        top_customers=top_customers,
        points_chart=points_chart,
        status_chart=status_chart,
        points_history_by_customer=points_history_by_customer
    )

@bp.route('/test')
def test():
    test_entry = LoyaltyPointsHistory(
        customer_id=1,
        points=100,
        points_type='–ó–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤',
        description='–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Å',
        loyalty_points_before=0,
        loyalty_status_before='–ù–æ–≤–∞—á–æ–∫',
        loyalty_status_points_before=0,
        loyalty_points_after=100,
        loyalty_status_after='–õ–æ—è–ª—å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç',
        loyalty_status_points_after=100,
        date=datetime.utcnow()
    )
    db.session.add(test_entry)
    db.session.commit()
    return '–¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–æ–≤'





@bp.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        
        user = User.query.filter_by(username=username).first()  # –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –ª–æ–≥—ñ–Ω–æ–º
        
        if user and user.check_password(password):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –±–µ–∑ —Ö–µ—à—É–≤–∞–Ω–Ω—è
            login_user(user)  # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            return redirect(url_for("main.clients"))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ dashboard
        else:
            flash("–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å", "danger")  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            return redirect(url_for("main.login"))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ª–æ–≥—ñ–Ω—É
    
    return render_template("login.html")


@bp.route("/logout")
@login_required
def logout():
    logout_user()
    flash("–í–∏—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π", "success")
    return redirect(url_for("main.login"))

from flask_login import current_user

